<?xml version="1.0"?>
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="index.html"> &project; <properties>
    <author email="mladen.turk@jboss.com">Mladen Turk</author>
    <title>Overview</title>
  </properties>
  <body>

    <section name="Installation">


      <subsection name="Downloading JBoss Web">
        <p>JBoss Web is distributed as a standalone webserver running on top of the JBoss 4 microkernel. The
          distribution can be downloaded directly from the <a
            href="http://labs.jboss.com/portal/index.html?ctrl:id=page.default.downloads&amp;project=jbossweb"
            >JBossWeb downloads page</a>. JBoss Web is not pure Java. It contains native code, compiled and optimized
          for each operating operating system. Download the package appropriate for your platform, paying particular
          attention to whether or not you are running on the 64-bit system. </p>

        <p>Uncompress the distribution wherever you would like JBoss Web installed. The resulting directory
          (jbossweb-4.0.4beta-linux-i686, for example) contains the JBoss Web instance. </p>
      </subsection>

      <subsection name="Adjusting run.conf">
         On some system you may have to do an extra step.
         Edit the $JBOSS_HOME/bin/run.conf (JBOSS_HOME should be something like jbossweb-1.0.0.GA) add the LD_LIBRARY_PATH
         variable and modify/add (replace $JBOSS_HOME by its value):
<source>
LD_LIBRARY_PATH=$JBOSS_HOME/bin/native
export LD_LIBRARY_PATH
</source>
      </subsection>

      <subsection name="Runnning JBoss Web">

        <p> Because JBoss Web is running on the JBoss Microkernel, it can be started like any JBoss AS instance. Before
          starting, make sure that your JAVA_HOME environment variable is set to your Java install directory. From the
          bin directory, run the run.bat or run.sh script, as is appropriate for your platform. If you run this from a
          shell, you will see the JBoss console log scroll by. If JBoss Web started correctly, the last few lines of
          output should look like the following: </p>

        <code>
16:33:10,684 INFO  [Http11AprProtocol] Starting Coyote HTTP/1.1 on http-172.16.129.72-8080
16:33:10,727 INFO  [AjpAprProtocol] Starting Coyote AJP/1.3 on ajp-172.16.129.72-8009
16:33:10,738 INFO  [Server] JBoss (MX MicroKernel) [4.0.4RC1 (build: CVSTag=JBoss_4_0_4_RC1 date=200602071519)] Started in 16s:128ms
</code>

        <p>The last line is the message JBoss sends when all services are up and running, letting you know that
          everything is good. However, the two lines before it are important for JBoss Web. They tell you that JBoss Web
          is listening on two ports, 8080 and 8009. More importantly, you can see from the output that JBoss Web is
          using the APR(Apache portable runtime) libraries. This means that you are using the optimized native
          libraries. Without the APR libraries, you would see output more like the following, with no reference to the
          APR code. </p>

        <code>
16:47:40,154 INFO  [Http11BaseProtocol] Starting Coyote HTTP/1.1 on http-0.0.0.0-8080
16:47:40,914 INFO  [ChannelSocket] JK: ajp13 listening on /0.0.0.0:8009
16:47:41,064 INFO  [JkMain] Jk running ID=0 time=0/299  config=null
   </code>
        <p> In worse cases, like using the wrong version of the libraries for your platform, JBoss Web may completely
          fail to start. If there is an error, check the console log (the output in your terminal window) or the server
          log in server/default/log/server.log for more information about the problem. </p>

        <p> To access your JBoss Web instance, go to <a href="http://localhost:8080/">http://localhost:8080/</a> in your
          web browser. If everything went well, you will see the JBoss Web start welcome screen. Congratulations, your
          JBoss Web instance is ready to go. </p>
      </subsection>

      <subsection name="Deploying Web Applications">
        <p> Developing web applications on JBoss Web is easy. To deploy a web application, copy the WAR file to the
          server/default/deploy directory. After a few seconds, JBoss will deploy the web application automatically. The
          following output shows the log messages after deploying an application named myapp.war. </p>
        <code>
18:03:01,830 INFO  [TomcatDeployer] deploy, ctxPath=/myapp, warUrl=.../tmp/deploy/tmp53493myapp-exp.war/
</code>

        <p>The ctxPath value is /myapp, which means the application would immediately be accessible at
          http://localhost:8080/myapp. </p>

        <p> Changes to the application can be made by copying a newer version of the WAR file into the deploy directory.
          If you need to remove an application, remove the WAR file from the deploy directory. JBoss Web will undeploy
          the application, noting the fact in the log. </p>
        <code>
18:06:58,086 INFO  [TomcatDeployer] undeploy, ctxPath=/myapp, warUrl=.../tmp/deploy/tmp53493myapp-exp.war/
</code>


      </subsection>

      <subsection name="For More Information">
        <p>We've only shown the bare minimum to get you going with JBoss Web. Further Configuration of JBoss Web is
          discussed in the rest of the JBoss Web documentation. For more information on working with JBoss, see the
          JBoss 4.0 Application server guide, available for download from the <a
            href="http://www.jboss.com/products/jbossas/docs">JBoss AS documentation page</a>. </p>
      </subsection>


    </section>
  </body>
</document>
