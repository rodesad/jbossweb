<?xml version="1.0"?>
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="conf03.html">

  &project;

  <properties>
    <author email="mladen.turk@jboss.com">Mladen Turk</author>
    <author email="remy.maucherat@jboss.com">Remy Maucherat</author>
    <title>AJP Configuration</title>
  </properties>

<body>

<section name="Directives">

<p>
  The AJP connector uses a socket poller for keepalive, increasing
  scalability of the server. As AJP is designed around a pool of persistent (or almost
  persistent) connections, this will reduce significantly the amount of processing threads
  needed by JBoss Web. Unlike the HTTP connector, the AJP connector cannot use sendfile to optimize
  static file processing.
</p>

<p>
  The following attributes are supported in the AJP connector:
</p>

<attributes>

<attribute name="acceptCount" required="false">
  <p>The maximum queue length for incoming connection requests when
  all possible request processing threads are in use.  Any requests
  received when the queue is full will be refused.  The default
  value is 10.</p>
</attribute>

<attribute name="address" required="false">
  <p>For servers with more than one IP address, this attribute
  specifies which address will be used for listening on the specified
  port.  By default, this port will be used on all IP addresses
  associated with the server. A value of <code>127.0.0.1</code>
  indicates that the Connector will only listen on the loopback
  interface.</p>
</attribute>

<attribute name="allowTrace" required="false">
  <p>A boolean value which can be used to enable or disable the TRACE
  HTTP method. If not specified, this attribute is set to false.</p>
</attribute>

<attribute name="connectionTimeout" required="false">
  <p>The number of milliseconds this <strong>Connector</strong> will wait,
  after accepting a connection, for the request URI line to be
  presented.  The default value is infinite (i.e. no timeout).</p>
</attribute>

<attribute name="emptySessionPath" required="false">
  <p>If set to <code>true</code>, all paths for session cookies will be set
  to <code>/</code>. This can be useful for portlet specification implementations,
  but will greatly affect performance if many applications are accessed on a given
  server by the client.
  If not specified, this attribute is set to <code>false</code>.</p>
</attribute>

<attribute name="enableLookups" required="false">
  <p>Set to <code>true</code> if you want calls to
  <code>request.getRemoteHost()</code> to perform DNS lookups in
  order to return the actual host name of the remote client.  Set
  to <code>false</code> to skip the DNS lookup and return the IP
  address in String form instead (thereby improving performance).
  By default, DNS lookups are enabled.</p>
</attribute>

<attribute name="firstReadTimeout" required="false">
  <p>The first read of a request will be made using the specified timeout. If no data is available
  after the specified time, the socket will be placed in the poller. Setting this value to 0 will
  increase scalability, but will have a minor impact on latency (see the related pollTime attribute).
  The default value is 100 (100ms). Note: on Windows, the actual value of firstReadTimeout will
  be 500 + the specified value.</p>
</attribute>

<attribute name="maxPostSize" required="false">
  <p>The maximum size in bytes of the POST which will be handled by
  the container FORM URL parameter parsing. The feature can be disabled by
  setting this attribute to a value less than or equal to 0.
  If not specified, this attribute is set to 2097152 (2 megabytes).</p>
</attribute>

<attribute name="maxSavePostSize" required="false">
  <p>The maximum size in bytes of the POST which will be saved/buffered by
  the container during FORM or CLIENT-CERT authentication. For both types
  of authentication, the POST will be saved/buffered before the user is
  authenticated. For CLIENT-CERT authentication, the POST is buffered for
  the duration of the SSL handshake and the buffer emptied when the request
  is processed. For FORM authentication the POST is saved whilst the user
  is re-directed to the login form and is retained until the user
  successfully authenticates or the session associated with the
  authentication request expires. The limit can be disabled by setting this
  attribute to -1. Setting the attribute to zero will disable the saving of
  POST data during authentication. If not specified, this attribute is set
  to 4096 (4 kilobytes).</p>
</attribute>

<attribute name="maxThreads" required="false">
  <p>The maximum number of request processing threads to be created
  by this <strong>Connector</strong>, which therefore determines the
  maximum number of simultaneous requests that can be handled.  If
  not specified, this attribute is set to 200.</p>
</attribute>

<attribute name="pollTime" required="false">
  <p>Duration of a poll call. Lowering this value will slightly decrease latency of connections
  being kept alive in some cases, but will use more CPU as more poll calls are being made. The
  default value is 5000 (5ms).</p>
</attribute>

<attribute name="pollerSize" required="false">
  <p>Amount of sockets that the poller responsible for polling kept alive connections can hold at a
  given time. Extra connections will be closed right away. The default value is 768, corresponding to
  768 keepalive connections.</p>
</attribute>

<attribute name="port" required="true">
  <p>The TCP port number on which this <strong>Connector</strong>
  will create a server socket and await incoming connections.  Your
  operating system will allow only one server application to listen
  to a particular port number on a particular IP address.</p>
</attribute>

<attribute name="protocol" required="false">
  <p>This attribute value must be <code>AJP/1.3</code> to use the AJP
  handler.</p>
</attribute>

<attribute name="proxyName" required="false">
  <p>If this <strong>Connector</strong> is being used in a proxy
  configuration, configure this attribute to specify the server name
  to be returned for calls to <code>request.getServerName()</code>.</p>
</attribute>

<attribute name="proxyPort" required="false">
  <p>If this <strong>Connector</strong> is being used in a proxy
  configuration, configure this attribute to specify the server port
  to be returned for calls to <code>request.getServerPort()</code>.</p>
</attribute>

<attribute name="redirectPort" required="false">
  <p>If this <strong>Connector</strong> is supporting non-SSL
  requests, and a request is received for which a matching
  <code>&lt;security-constraint&gt;</code> requires SSL transport,
  Catalina will automatically redirect the request to the port
  number specified here.</p>
</attribute>

<attribute name="request.registerRequests" required="false">
  <p>This attribute controls request registration for JMX monitoring
  of the Connector.  It is enabled by default, but may be turned
  it off to save a bit of memory.</p>
</attribute>

<attribute name="scheme" required="false">
  <p>Set this attribute to the name of the protocol you wish to have
  returned by calls to <code>request.getScheme()</code>.  For
  example, you would set this attribute to "<code>https</code>"
  for an SSL Connector.  The default value is "<code>http</code>".</p>
</attribute>

<attribute name="secure" required="false">
  <p>Set this attribute to <code>true</code> if you wish to have
  calls to <code>request.isSecure()</code> to return <code>true</code>
  for requests received by this Connector (you would want this on an
  SSL Connector).  The default value is <code>false</code>.</p>
</attribute>

<attribute name="tcpNoDelay" required="false">
  <p>If set to <code>true</code>, the TCP_NO_DELAY option will be
  set on the server socket, which improves performance under most
  circumstances.  This is set to <code>true</code> by default.</p>
</attribute>

<attribute name="tomcatAuthentication" required="false">
  <p>If set to <code>true</code>, the authetication will be done in Jboss Web.
  Otherwise, the authenticated principal will be propagated from the native
  webaserver and used for authorization in JBoss Web.
  The default value is <code>true</code>.</p>
</attribute>

<attribute name="URIEncoding" required="false">
  <p>This specifies the character encoding used to decode the URI bytes,
  after %xx decoding the URL. If not specified, ISO-8859-1 will be used.
  </p>
</attribute>

<attribute name="useBodyEncodingForURI" required="false">
  <p>This specifies if the encoding specified in contentType should be used
  for URI query parameters, instead of using the URIEncoding. This
  setting is present for compatibility with Tomcat 4.1.x, where the
  encoding specified in the contentType, or explicitely set using
  Request.setCharacterEncoding method was also used for the parameters from
  the URL. The default value is <code>false</code>.
  </p>
</attribute>

<attribute name="useIPVHosts" required="false">
  <p>Set this attribute to <code>true</code> to cause JBoss Web to use
  the ServerName passed by the native web server to determine the Host
  to send the request to.  The default value is <code>false</code>.</p>
</attribute>

<attribute name="xpoweredBy" required="false">
  <p>Set this attribute to <code>true</code> to cause JBoss Web to advertise
  support for the Srevlet specification using the header recommended in the
  specification.  The default value is <code>false</code>.</p>
</attribute>

</attributes>

</section>
</body>
</document>
